[{"K:\\ALevel\\REACT\\xyplayer\\src\\index.tsx":"1","K:\\ALevel\\REACT\\xyplayer\\src\\App.tsx":"2","K:\\ALevel\\REACT\\xyplayer\\src\\store\\index.ts":"3","K:\\ALevel\\REACT\\xyplayer\\src\\routes.ts":"4","K:\\ALevel\\REACT\\xyplayer\\src\\store\\rootReducer.ts":"5","K:\\ALevel\\REACT\\xyplayer\\src\\components\\Login\\index.tsx":"6","K:\\ALevel\\REACT\\xyplayer\\src\\components\\Registration\\index.tsx":"7","K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\index.ts":"8","K:\\ALevel\\REACT\\xyplayer\\src\\store\\actions.ts":"9","K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetStarted\\index.tsx":"10","K:\\ALevel\\REACT\\xyplayer\\src\\components\\AudioPlayer\\index.tsx":"11","K:\\ALevel\\REACT\\xyplayer\\src\\store\\player\\index.ts":"12"},{"size":306,"mtime":1607959608800,"results":"13","hashOfConfig":"14"},{"size":1253,"mtime":1607724935602,"results":"15","hashOfConfig":"14"},{"size":144,"mtime":1607637288171,"results":"16","hashOfConfig":"14"},{"size":138,"mtime":1607642378312,"results":"17","hashOfConfig":"14"},{"size":455,"mtime":1607781623100,"results":"18","hashOfConfig":"14"},{"size":213,"mtime":1607644923084,"results":"19","hashOfConfig":"14"},{"size":250,"mtime":1607643956470,"results":"20","hashOfConfig":"14"},{"size":619,"mtime":1607637463596,"results":"21","hashOfConfig":"14"},{"size":345,"mtime":1607854573225,"results":"22","hashOfConfig":"14"},{"size":2328,"mtime":1607975529266,"results":"23","hashOfConfig":"14"},{"size":12762,"mtime":1607951369542,"results":"24","hashOfConfig":"14"},{"size":500,"mtime":1607886815296,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"lzvrmh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"K:\\ALevel\\REACT\\xyplayer\\src\\index.tsx",[],["54","55"],"K:\\ALevel\\REACT\\xyplayer\\src\\App.tsx",["56","57","58"],"import React from \"react\"\nimport logo from \"./xy_logo_100x180.png\"\nimport \"./App.css\"\nimport * as routes from \"./routes\"\nimport { BrowserRouter, Link, Redirect, Route, Switch } from \"react-router-dom\"\n\nimport Login from \"./components/Login\"\nimport Registration from \"./components/Registration\"\nimport GetStarted from \"./components/GetStarted\"\n\nfunction App() {\n  const [isAuth, setIsAuth] = React.useState(false)\n\n  return (\n    <>\n      <BrowserRouter>\n        <div id=\"wrapper\">\n            <header id=\"header\">\n              <div className=\"container-fluid\">\n                <nav>\n                  <li>\n                    <Link to={routes.LOGIN}>Login</Link>\n                  </li>\n                </nav>\n              </div>\n            </header>\n            <Switch>\n              <Route path={routes.HOMEPAGE} component={GetStarted} />\n              <Route path={routes.REGISTRATION} component={Registration} />\n\n              <Route path={routes.LOGIN} component={Login} />\n\n              <Redirect from={routes.HOMEPAGE} exact to={routes.REGISTRATION} />\n              <Redirect to={routes.ERRORPAGE} />\n            </Switch>\n            <footer id=\"footer\"></footer>\n          </div>\n      </BrowserRouter>\n    </>\n  )\n}\n\nexport default App\n","K:\\ALevel\\REACT\\xyplayer\\src\\store\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\routes.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\rootReducer.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\Login\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\Registration\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\actions.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetStarted\\index.tsx",["59"],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\AudioPlayer\\index.tsx",["60","61","62","63"],"import React, { SetStateAction } from \"react\"\r\nimport { bindActionCreators, Dispatch } from \"redux\"\r\nimport { RootAction, RootState } from \"../../store/rootReducer\"\r\nimport * as playerActions from \"../../store/actions\"\r\nimport { connect } from \"react-redux\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport { Button, Alert } from \"react-bootstrap\"\r\n\r\ninterface State {\r\n  play: boolean\r\n  totalTimeDuration: number\r\n  totalMinDuration: number\r\n  secBalanceDuration: number\r\n  currMinTime: string\r\n  currSecBalanceTime: string\r\n  volInputValue: number\r\n  volTrack: number\r\n  volLoopValue: boolean\r\n  volMute: boolean\r\n}\r\n\r\ntype AudioElementEvent<T> = React.SyntheticEvent<HTMLAudioElement, Event> & {\r\n  duration: number\r\n  target: T\r\n}\r\n\r\ninterface TrackProps {\r\n  src: string\r\n}\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n  ReturnType<typeof mapDispatchToProps> &\r\n  TrackProps\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  oldVolValueToProps: state.play.volValue,\r\n})\r\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      setOldVolValue: (payload) => playerActions.savingVolValue(payload),\r\n    },\r\n    dispatch\r\n  )\r\n\r\nvar i = 0\r\nlet ctx, x_end, y_end, bar_height\r\nconst bars = 50\r\nconst radius = 0\r\nconst bar_width = 20\r\nconst browserInterfaceDiffWidth = 30\r\nconst browserInterfaceDiffHeight = 100\r\n\r\nclass Music extends React.PureComponent<Props, State> {\r\n  // audio: globalThis.HTMLAudioElement\r\n  source: any\r\n  analyser: any\r\n  frequency_array: any\r\n  canvas: React.RefObject<HTMLCanvasElement>\r\n  rafId!: number\r\n  audioRef: React.RefObject<HTMLAudioElement>\r\n  refVolRange: React.RefObject<HTMLInputElement>\r\n  refTimeRange: React.RefObject<HTMLInputElement>\r\n  audioTrack1!: HTMLAudioElement | null\r\n  timeRanger!: HTMLInputElement | null\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      play: false,\r\n      totalTimeDuration: 0,\r\n      totalMinDuration: 0,\r\n      secBalanceDuration: 0,\r\n      currMinTime: \"00\",\r\n      currSecBalanceTime: \"00\",\r\n      volInputValue: 20,\r\n      volTrack: 0.2,\r\n      volLoopValue: false,\r\n      volMute: false,\r\n    }\r\n    // this.audio = new Audio(this.props.src)\r\n    this.canvas = React.createRef()\r\n    this.audioRef = React.createRef()\r\n    this.refVolRange = React.createRef()\r\n    this.refTimeRange = React.createRef()\r\n\r\n    this.trackOnTimeUpdate = this.trackOnTimeUpdate.bind(this)\r\n    this.timeDivider = this.timeDivider.bind(this)\r\n    this.volValueHandler = this.volValueHandler.bind(this)\r\n    this.loopInstall = this.loopInstall.bind(this)\r\n    this.muteInstall = this.muteInstall.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.audioTrack1 = this.audioRef.current\r\n    this.timeRanger = this.refTimeRange.current\r\n    this.audioTrack1!.addEventListener(\"ended\", () =>\r\n      this.setState({ play: false })\r\n    )\r\n\r\n    this.context = new AudioContext()\r\n    this.source = this.context.createMediaElementSource(this.audioTrack1)\r\n    this.analyser = this.context.createAnalyser()\r\n    this.source.connect(this.analyser)\r\n    this.analyser.connect(this.context.destination)\r\n    this.frequency_array = new Uint8Array(this.analyser.frequencyBinCount)\r\n  }\r\n  componentDidUpdate() {\r\n    this.audioTrack1!.loop = this.state.volLoopValue\r\n    this.audioTrack1!.volume = this.state.volTrack\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.audioTrack1!.removeEventListener(\"ended\", () =>\r\n      this.setState({ play: false })\r\n    )\r\n    cancelAnimationFrame(this.rafId)\r\n    this.analyser.disconnect()\r\n    this.source.disconnect()\r\n  }\r\n\r\n  animationLooper(canvas: any) {\r\n    let width = (canvas.width = window.innerWidth - browserInterfaceDiffWidth)\r\n    let height = (canvas.height =\r\n      window.innerHeight - browserInterfaceDiffHeight)\r\n    let center_x = width / 2 + browserInterfaceDiffWidth / 2\r\n    let center_y = height / 2 + browserInterfaceDiffHeight / 2\r\n    ctx = canvas.getContext(\"2d\")\r\n\r\n    for (var i = 0; i < bars; i++) {\r\n      //divide a circle into equal part\r\n      const rads = (Math.PI * 2) / bars\r\n\r\n      // Math is magical\r\n      bar_height = this.frequency_array[i] * 1.33\r\n      let x = center_x + Math.cos(rads * i) * (radius + bar_height / 2)\r\n      let y = center_y + Math.sin(rads * i) * (radius + bar_height / 2)\r\n      x_end = center_x + Math.cos(rads * i) * (radius + bar_height)\r\n      y_end = center_y + Math.sin(rads * i) * (radius + bar_height)\r\n\r\n      //draw a bar\r\n      this.drawBar(x, y, x_end, y_end, this.frequency_array[i], ctx, canvas)\r\n    }\r\n  }\r\n\r\n  drawBar(\r\n    x1 = 0,\r\n    y1 = 0,\r\n    x2 = 0,\r\n    y2 = 0,\r\n    frequency: number,\r\n    ctx: {\r\n      createLinearGradient: (\r\n        arg0: number,\r\n        arg1: number,\r\n        arg2: number,\r\n        arg3: number\r\n      ) => any\r\n      fillStyle: any\r\n      strokeStyle: string | undefined\r\n      lineWidth: number\r\n      beginPath: () => void\r\n      moveTo: (arg0: number, arg1: number) => void\r\n      lineTo: (arg0: number, arg1: number) => void\r\n      stroke: () => void\r\n      closePath: () => void\r\n      clearRect: (\r\n        arg0: number,\r\n        arg1: number,\r\n        arg2: number,\r\n        arg3: number\r\n      ) => void\r\n    },\r\n    canvas: { width: number; height: number }\r\n  ) {\r\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height)\r\n    gradient.addColorStop(0, \"white\")\r\n    gradient.addColorStop(1, \"green\")\r\n    ctx.fillStyle = gradient\r\n\r\n    let lineColor\r\n    if (frequency < 75) {\r\n      if (this.state.play) {\r\n        i = i + 1\r\n        if (i / 10 < 40) {\r\n          lineColor = `rgb(${238},${10},${230}` // ярко-фиолетовый\r\n        }\r\n        if (i / 10 >= 40 && i / 10 < 120) {\r\n          lineColor = `rgb(${0},${120},${250}` // голубой\r\n        }\r\n        if (i / 10 >= 120 && i / 10 < 260) {\r\n          lineColor = `rgb(${34},${217},${0}` // зеленый\r\n        }\r\n        if (i / 10 >= 260 && i / 10 < 380) {\r\n          lineColor = `rgb(${255},${138},${0}` // оранженый\r\n        }\r\n        if (i / 10 > 380) {\r\n          lineColor = `rgb(${255},${0},${0}` // насыщенный красный\r\n        }\r\n        if (i / 10 === 500) {\r\n          i = 0\r\n        }\r\n      }\r\n    } else if (frequency >= 75 && frequency < 120) {\r\n      if (i / 10 >= 120 && i / 10 < 260) {\r\n        lineColor = `rgb(${184},${250},${220}` // бирюзовый (светло-зеленый+светло-голубой)\r\n      } else {\r\n        lineColor = `rgb(${184 * Math.random()},${250},${220}`\r\n      }\r\n    } else if (frequency >= 120 && frequency < 160) {\r\n      if (i / 10 >= 260 && i / 10 < 380) {\r\n        lineColor = `rgb(${229},${209},${228})` // светло-фиолетовый\r\n      } else {\r\n        lineColor = `rgb(${10 * frequency * Math.random()},${\r\n          2 * frequency * Math.random()\r\n        },${5 * frequency * Math.random()})`\r\n      }\r\n    } else {\r\n      lineColor = `rgb(${238},${230},${10})` // желтый\r\n    }\r\n\r\n    ctx.strokeStyle = lineColor\r\n    ctx.lineWidth = bar_width\r\n    ctx.beginPath()\r\n    ctx.moveTo(x1, y1)\r\n    ctx.lineTo(x2, y2)\r\n    ctx.stroke()\r\n    ctx.closePath()\r\n\r\n    if (!this.state.play) {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n  }\r\n\r\n  tick = () => {\r\n    this.animationLooper(this.canvas.current)\r\n    this.analyser.getByteTimeDomainData(this.frequency_array)\r\n    this.rafId = requestAnimationFrame(this.tick)\r\n  }\r\n\r\n  togglePlay = () => {\r\n    this.setState({ play: !this.state.play }, () => {\r\n      if (this.state.play) {\r\n        // this.audio.play()\r\n        this.rafId = requestAnimationFrame(this.tick)\r\n        this.audioTrack1?.play()\r\n      } else {\r\n        // this.audio.pause()\r\n        cancelAnimationFrame(this.rafId)\r\n        this.audioTrack1?.pause()\r\n      }\r\n    })\r\n  }\r\n\r\n  volValueHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    let newVal: string = (+e.target.value / 100).toFixed(2)\r\n    this.props.setOldVolValue(newVal)\r\n    this.setState({ volTrack: +newVal })\r\n    this.setState({ volInputValue: +e.target.value })\r\n  }\r\n\r\n  loopInstall = () => {\r\n    this.setState({ volLoopValue: !this.state.volLoopValue })\r\n    console.log(this.state.volLoopValue)\r\n  }\r\n\r\n  muteInstall = () => {\r\n    if (!this.state.volMute) {\r\n      this.props.setOldVolValue(+(this.state.volInputValue / 100).toFixed(2))\r\n      this.setState({ volTrack: 0 })\r\n      this.setState({ volInputValue: 0 })\r\n      this.setState({ volMute: !this.state.volMute })\r\n    } else {\r\n      this.setState({ volTrack: this.props.oldVolValueToProps })\r\n      this.setState({ volInputValue: this.props.oldVolValueToProps * 100 })\r\n      this.setState({ volMute: !this.state.volMute })\r\n    }\r\n  }\r\n\r\n  loadTrackDuration = (e: AudioElementEvent<HTMLAudioElement>): void => {\r\n    this.setState({ totalMinDuration: Math.trunc(e.target.duration / 60) })\r\n    this.setState({\r\n      secBalanceDuration: Math.round(\r\n        e.target.duration - Math.trunc(e.target.duration / 60) * 60\r\n      ),\r\n    })\r\n    this.setState({ totalTimeDuration: e.target.duration })\r\n  }\r\n\r\n  timeDivider(currSec: string, counter: string | undefined = \"00\"): any {\r\n    let newCounterValue = 60 * (+counter + 1)\r\n    if (+currSec < newCounterValue) {\r\n      if (+currSec < 60) {\r\n        this.setState({ currMinTime: `${+counter}`.padStart(2, counter) })\r\n        this.setState({ currSecBalanceTime: `${+currSec}`.padStart(2, \"00\") })\r\n      } else if (+currSec === 60) {\r\n        this.setState({ currSecBalanceTime: \"00\" })\r\n      } else {\r\n        this.setState({\r\n          currSecBalanceTime: `${+currSec - 60 * +counter}`.padStart(2, \"00\"),\r\n        })\r\n      }\r\n    }\r\n    if (+currSec >= +this.state.totalTimeDuration - 1) {\r\n      this.setState({\r\n        currMinTime: `${Math.trunc(+currSec / 60)}`.padStart(2, \"00\"),\r\n      })\r\n      return\r\n    }\r\n    if (+currSec >= newCounterValue - 1 && +currSec !== 0) {\r\n      this.setState({ currMinTime: `${+counter + 1}`.padStart(2, \"00\") })\r\n      return this.timeDivider(\r\n        `${+currSec + 1}`,\r\n        `${+counter + 1}`.padStart(2, counter)\r\n      )\r\n    }\r\n  }\r\n\r\n  trackOnTimeUpdate = (e: AudioElementEvent<HTMLAudioElement>): void => {\r\n    this.timeRanger!.value = e.target.currentTime.toFixed(0)\r\n\r\n    this.timeDivider(e.target.currentTime.toFixed(0))\r\n\r\n    this.timeRanger!.onchange = (e: any) => {\r\n      this.audioTrack1!.currentTime = +e.target!.value\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <button onClick={this.togglePlay}>\r\n          {this.state.play ? \"Pause\" : \"Play\"}\r\n        </button>\r\n        <canvas ref={this.canvas} />\r\n        <div className=\"col\">\r\n          <audio\r\n            src={this.props.src}\r\n            ref={this.audioRef}\r\n            onLoadedMetadata={this.loadTrackDuration}\r\n            onTimeUpdate={this.trackOnTimeUpdate}\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p>{`TotalTime: ${this.state.totalMinDuration} min ${this.state.secBalanceDuration} sec`}</p>\r\n            </div>\r\n            <div className=\"col\">\r\n              <p>{`CurrentTime: ${this.state.currMinTime} min ${this.state.currSecBalanceTime} sec`}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button onClick={this.loopInstall}>LoopTrack</button>\r\n            </div>\r\n            <div className=\"col\">\r\n              <button onClick={this.muteInstall}>Mute</button>\r\n            </div>\r\n            <div className=\"col\">\r\n              <p>CurrentVolume: {this.state.volInputValue}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col px-3\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div>TimeRange:</div>\r\n                  <input\r\n                    ref={this.refTimeRange}\r\n                    id=\"timeRange\"\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max={this.state.totalTimeDuration}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col px-3\">\r\n              <div>VolumeRange:</div>\r\n              <input\r\n                id=\"volumeRange\"\r\n                type=\"range\"\r\n                ref={this.refVolRange}\r\n                value={this.state.volInputValue}\r\n                onChange={this.volValueHandler}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Music)\r\n",["64","65"],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\player\\index.ts",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"74","line":12,"column":10,"nodeType":"72","messageId":"73","endLine":12,"endColumn":16},{"ruleId":"70","severity":1,"message":"75","line":12,"column":18,"nodeType":"72","messageId":"73","endLine":12,"endColumn":27},{"ruleId":"70","severity":1,"message":"76","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":19},{"ruleId":"70","severity":1,"message":"77","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":31},{"ruleId":"70","severity":1,"message":"78","line":6,"column":10,"nodeType":"72","messageId":"73","endLine":6,"endColumn":23},{"ruleId":"70","severity":1,"message":"79","line":7,"column":10,"nodeType":"72","messageId":"73","endLine":7,"endColumn":16},{"ruleId":"70","severity":1,"message":"80","line":7,"column":18,"nodeType":"72","messageId":"73","endLine":7,"endColumn":23},{"ruleId":"66","replacedBy":"81"},{"ruleId":"68","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'isAuth' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","'Container' is defined but never used.","'SetStateAction' is defined but never used.","'CSSTransition' is defined but never used.","'Button' is defined but never used.","'Alert' is defined but never used.",["83"],["84"],"no-global-assign","no-unsafe-negation"]
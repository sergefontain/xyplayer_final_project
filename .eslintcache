[{"K:\\ALevel\\REACT\\xyplayer\\src\\index.tsx":"1","K:\\ALevel\\REACT\\xyplayer\\src\\App.tsx":"2","K:\\ALevel\\REACT\\xyplayer\\src\\store\\index.ts":"3","K:\\ALevel\\REACT\\xyplayer\\src\\routes.ts":"4","K:\\ALevel\\REACT\\xyplayer\\src\\store\\rootReducer.ts":"5","K:\\ALevel\\REACT\\xyplayer\\src\\components\\Login\\index.tsx":"6","K:\\ALevel\\REACT\\xyplayer\\src\\components\\Registration\\index.tsx":"7","K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\index.ts":"8","K:\\ALevel\\REACT\\xyplayer\\src\\store\\actions.ts":"9","K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetStarted\\index.tsx":"10","K:\\ALevel\\REACT\\xyplayer\\src\\components\\AudioPlayer\\index.tsx":"11","K:\\ALevel\\REACT\\xyplayer\\src\\store\\player\\index.ts":"12","K:\\ALevel\\REACT\\xyplayer\\src\\components\\NotFound\\index.tsx":"13","K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\saga.ts":"14","K:\\ALevel\\REACT\\xyplayer\\src\\store\\apiClient.ts":"15","K:\\ALevel\\REACT\\xyplayer\\src\\store\\main\\index.ts":"16","K:\\ALevel\\REACT\\xyplayer\\src\\store\\main\\saga.ts":"17","K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetPlaylists\\index.tsx":"18"},{"size":306,"mtime":1608027720360,"results":"19","hashOfConfig":"20"},{"size":3638,"mtime":1608680265137,"results":"21","hashOfConfig":"20"},{"size":830,"mtime":1608647946306,"results":"22","hashOfConfig":"20"},{"size":161,"mtime":1608223005692,"results":"23","hashOfConfig":"20"},{"size":514,"mtime":1608319469274,"results":"24","hashOfConfig":"20"},{"size":2585,"mtime":1608247548438,"results":"25","hashOfConfig":"20"},{"size":3317,"mtime":1608248034369,"results":"26","hashOfConfig":"20"},{"size":999,"mtime":1608254467712,"results":"27","hashOfConfig":"20"},{"size":2112,"mtime":1608649420722,"results":"28","hashOfConfig":"20"},{"size":6024,"mtime":1608678371762,"results":"29","hashOfConfig":"20"},{"size":23374,"mtime":1608678095394,"results":"30","hashOfConfig":"20"},{"size":500,"mtime":1607886815296,"results":"31","hashOfConfig":"20"},{"size":230,"mtime":1608225857841,"results":"32","hashOfConfig":"20"},{"size":1928,"mtime":1608490845862,"results":"33","hashOfConfig":"20"},{"size":1061,"mtime":1608633245108,"results":"34","hashOfConfig":"20"},{"size":2225,"mtime":1608649375337,"results":"35","hashOfConfig":"20"},{"size":10821,"mtime":1608678415748,"results":"36","hashOfConfig":"20"},{"size":11577,"mtime":1608680622940,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"lzvrmh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},"K:\\ALevel\\REACT\\xyplayer\\src\\index.tsx",[],["77","78"],"K:\\ALevel\\REACT\\xyplayer\\src\\App.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\routes.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\rootReducer.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\Login\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\Registration\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\actions.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetStarted\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\AudioPlayer\\index.tsx",[],["79","80"],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\player\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\NotFound\\index.tsx",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\auth\\saga.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\apiClient.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\main\\index.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\store\\main\\saga.ts",[],"K:\\ALevel\\REACT\\xyplayer\\src\\components\\GetPlaylists\\index.tsx",["81"],"import React, { useState } from \"react\"\r\nimport { Row, Spinner, Col, Alert, Button, Container } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport { bindActionCreators, Dispatch } from \"redux\"\r\nimport { PayloadActionCreator } from \"typesafe-actions\"\r\nimport { PlaylistsFind, TracksFind } from \"../../store/main/types\"\r\nimport Player from \"../AudioPlayer\"\r\nimport { RootAction, RootState } from \"../../store/rootReducer\"\r\nimport * as actions from \"./../../store/actions\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport \"./styles.css\"\r\n\r\ninterface PlaylistResolver {\r\n  queryStatus: string\r\n  playlistsFromRedux: PlaylistsFind | null\r\n  getTracks: PayloadActionCreator<\"main/GET_TRACKS_REQUEST\", string>\r\n}\r\n\r\ninterface TrackResolver {\r\n  queryStatus: string\r\n  tracksFromRedux: TracksFind | null\r\n}\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n  ReturnType<typeof mapDispatchToProps>\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  playlistsFromRedux: state.main.playlists,\r\n  queryStatus: state.main.queryStatus,\r\n  tracksFromRedux: state.main.tracks,\r\n  currentPlaylistPage: state.main.currentPlaylistPage,\r\n  pageLimitOverload: state.main.pageLimitOverload,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) =>\r\n  bindActionCreators(\r\n    {\r\n      getTracks: actions.getTracksReq,\r\n      prevPlaylistPage: actions.prevPlaylistPage,\r\n      nextPlaylistPage: actions.nextPlaylistPage,\r\n    },\r\n    dispatch\r\n  )\r\n\r\nconst GetPlaylists: React.FC<Props> = ({\r\n  playlistsFromRedux,\r\n  queryStatus,\r\n  tracksFromRedux,\r\n  getTracks,\r\n  prevPlaylistPage,\r\n  nextPlaylistPage,\r\n  currentPlaylistPage,\r\n  pageLimitOverload,\r\n}) => {\r\n  const [showButton, setShowButton] = useState(true)\r\n  const [showMessage, setShowMessage] = useState(\"\")\r\n\r\n  const MapPlaylistsQuery = ({\r\n    queryStatus,\r\n    playlistsFromRedux,\r\n    getTracks,\r\n  }: PlaylistResolver) => {\r\n    if (queryStatus === \"idle\") {\r\n      return <span className=\"my-3\">Playlists Search Data</span>\r\n    }\r\n    if (queryStatus === \"playlists_pending\") {\r\n      return <Spinner animation=\"grow\" />\r\n    }\r\n    if (\r\n      queryStatus === \"playlists_succeed\" ||\r\n      queryStatus === \"tracks_pending\" ||\r\n      queryStatus === \"tracks_succeed\"\r\n    ) {\r\n      if (playlistsFromRedux!.PlaylistFind) {\r\n        let filteredPlaylist = playlistsFromRedux!.PlaylistFind.filter((z) => {\r\n          var mySet = new Set(z.tracks)\r\n          if (mySet.size !== 0) {\r\n            return z\r\n          }\r\n        })\r\n        return (\r\n          <>\r\n            {filteredPlaylist.map((x, i) => {\r\n              if (x[\"name\"] !== \"\" && x[\"name\"] !== null) {\r\n                return (\r\n                  <div\r\n                    key={i.toString()}\r\n                    onClick={() => getTracks(x._id)}\r\n                    className=\"mappedPlaylist\"\r\n                  >\r\n                    {x.name}\r\n                  </div>\r\n                )\r\n              } else {\r\n                return null\r\n              }\r\n            })}\r\n          </>\r\n        )\r\n      } else {\r\n        return <div>No Data yet</div>\r\n      }\r\n    } else {\r\n      return <div>unknown error!</div>\r\n    }\r\n  }\r\n\r\n  const MapTracksQuery = ({ queryStatus, tracksFromRedux }: TrackResolver) => {\r\n    if (\r\n      queryStatus === \"playlists_succeed\" ||\r\n      queryStatus === \"idle\" ||\r\n      queryStatus === \"playlists_pending\"\r\n    ) {\r\n      return <div>Tracks Search Data</div>\r\n    }\r\n    if (queryStatus === \"tracks_pending\") {\r\n      return <Spinner animation=\"grow\" />\r\n    }\r\n    if (queryStatus === \"tracks_succeed\") {\r\n      if (!tracksFromRedux) {\r\n        return null\r\n      } else if (tracksFromRedux!.PlaylistFindOne) {\r\n        let filteredPlaylist = tracksFromRedux!.PlaylistFindOne.tracks.filter(\r\n          (z) => z.url\r\n        )\r\n        return (\r\n          <Container fluid className=\"flex-grow-1 d-flex flex-column\">\r\n            {filteredPlaylist.map((x, i) => {\r\n              return (\r\n                <Row key={i.toString()} className=\"mappedSong flex-column\">\r\n                  {showButton && (\r\n                    <Col onClick={() => setShowMessage(x._id)} className=\"\">\r\n                      {x.originalFileName}\r\n                    </Col>\r\n                  )}\r\n\r\n                  <CSSTransition\r\n                    in={x._id === showMessage}\r\n                    timeout={300}\r\n                    classNames=\"alert\"\r\n                    unmountOnExit\r\n                    onEnter={() => setShowButton(false)}\r\n                    onExited={() => setShowButton(true)}\r\n                  >\r\n                    <Col>\r\n                      <Alert\r\n                        variant=\"primary\"\r\n                        dismissible\r\n                        onClose={() => setShowMessage(\"\")}\r\n                      >\r\n                        <Alert.Heading\r\n                          className=\"pr-4\"\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                          }}\r\n                        >\r\n                          Track №:\r\n                        </Alert.Heading>\r\n                        <div\r\n                          style={{\r\n                            fontSize: \"1.5rem\",\r\n                            display: \"inline-block\",\r\n                          }}\r\n                        >\r\n                          {x.id3.trackNumber}\r\n                        </div>\r\n                        <Player\r\n                          src={x.url}\r\n                          title={x.id3.title ? x.id3.title : undefined}\r\n                          originName={x.originalFileName}\r\n                        />\r\n                        <Row>\r\n                          <Col\r\n                            xs={6}\r\n                            md={6}\r\n                            lg={6}\r\n                            className=\"justify-content-start d-flex\"\r\n                          >\r\n                            <Button\r\n                              onClick={() => setShowMessage(\"\")}\r\n                              size=\"lg\"\r\n                              style={{ width: \"100%\" }}\r\n                            >\r\n                              Close\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </Alert>\r\n                    </Col>\r\n                  </CSSTransition>\r\n                </Row>\r\n              )\r\n            })}\r\n          </Container>\r\n        )\r\n      } else {\r\n        let filteredTracks = tracksFromRedux!.TrackFind.filter((z) => z.url)\r\n        return (\r\n          <Container fluid className=\"flex-grow-1 d-flex flex-column\">\r\n            {filteredTracks.map((x, i) => {\r\n              return (\r\n                <Row key={i.toString()} className=\"mappedSong flex-column\">\r\n                  {showButton && (\r\n                    <Col onClick={() => setShowMessage(x._id)} className=\"\">\r\n                      {x.originalFileName}\r\n                    </Col>\r\n                  )}\r\n\r\n                  <CSSTransition\r\n                    in={x._id === showMessage}\r\n                    timeout={300}\r\n                    classNames=\"alert\"\r\n                    unmountOnExit\r\n                    onEnter={() => setShowButton(false)}\r\n                    onExited={() => setShowButton(true)}\r\n                  >\r\n                    <Col>\r\n                      <Alert\r\n                        variant=\"primary\"\r\n                        dismissible\r\n                        onClose={() => setShowMessage(\"\")}\r\n                      >\r\n                        <Alert.Heading\r\n                          className=\"pr-4\"\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                          }}\r\n                        >\r\n                          Track №:\r\n                        </Alert.Heading>\r\n                        <div\r\n                          style={{\r\n                            fontSize: \"1.5rem\",\r\n                            display: \"inline-block\",\r\n                          }}\r\n                        >\r\n                          {x.id3.trackNumber}\r\n                        </div>\r\n                        <Player\r\n                          src={x.url}\r\n                          title={x.id3.title ? x.id3.title : undefined}\r\n                          originName={x.originalFileName}\r\n                        />\r\n                        <Row>\r\n                          <Col\r\n                            xs={6}\r\n                            md={6}\r\n                            lg={6}\r\n                            className=\"justify-content-start d-flex\"\r\n                          >\r\n                            <Button\r\n                              onClick={() => setShowMessage(\"\")}\r\n                              size=\"lg\"\r\n                              style={{ width: \"100%\" }}\r\n                            >\r\n                              Close\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </Alert>\r\n                    </Col>\r\n                  </CSSTransition>\r\n                </Row>\r\n              )\r\n            })}\r\n          </Container>\r\n        )\r\n      }\r\n    } else {\r\n      return <div>unknown error!</div>\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <h2 className=\"forPlaylists bg-secondary rounded playCont text-white my-3\">\r\n            Playlists available\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"flex-grow-1 flex-column\">\r\n        <Col className=\"d-flex flex-row\">\r\n          <Col className=\"d-flex justify-content-start\">\r\n            {+currentPlaylistPage === 1 ? (\r\n              <Button\r\n                disabled\r\n                onClick={() => prevPlaylistPage(`${+currentPlaylistPage - 1}`)}\r\n              >\r\n                Prev\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={() => prevPlaylistPage(`${+currentPlaylistPage - 1}`)}\r\n              >\r\n                Prev\r\n              </Button>\r\n            )}\r\n          </Col>\r\n          <div className=\"plyCol flex-grow-1 w-100\">\r\n            <MapPlaylistsQuery\r\n              queryStatus={queryStatus}\r\n              getTracks={getTracks}\r\n              playlistsFromRedux={playlistsFromRedux}\r\n            />\r\n          </div>\r\n          <Col className=\"d-flex justify-content-end\">\r\n            {+currentPlaylistPage > 0 && !pageLimitOverload ? (\r\n              <Button\r\n                onClick={() => nextPlaylistPage(`${+currentPlaylistPage + 1}`)}\r\n              >\r\n                Next\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                disabled\r\n                onClick={() => nextPlaylistPage(`${+currentPlaylistPage + 1}`)}\r\n              >\r\n                Next\r\n              </Button>\r\n            )}\r\n          </Col>\r\n        </Col>\r\n        <div className=\"px-3\">\r\n          <h2 className=\"forPlaylists bg-secondary rounded playCont text-white my-3\">\r\n            Tracks available\r\n          </h2>\r\n        </div>\r\n\r\n        <Col className=\"d-flex flex-column mb-3\">\r\n          <div className=\"plyCol flex-grow-1\">\r\n            <MapTracksQuery\r\n              queryStatus={queryStatus}\r\n              tracksFromRedux={tracksFromRedux}\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(GetPlaylists))\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":75,"column":76,"nodeType":"90","messageId":"91","endLine":75,"endColumn":78},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],["92"],["93"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]